@c -*-texinfo-*-
@c This is part of the GNU G-Golf Reference Manual.
@c Copyright (C) 2016 - 2021 Free Software Foundation, Inc.
@c See the file g-golf.texi for copying conditions.


@node Utilities_
@subsection Utilities


@subheading Procedures

@indentedblock
@table @code
@item @ref{g-studly-caps-expand}
@item @ref{g-name->name}
@item @ref{g-name->short-name}
@item @ref{g-name->class-name}
@item @ref{gi-type-tag->ffi}
@item @ref{gi-type-tag->init-val}
@item @ref{syntax-name->method-name}
@end table
@end indentedblock


@subheading Variables

@indentedblock
@table @code
@item @ref{%g-name-transform-exceptions}
@item @ref{%g-studly-caps-expand-token-exceptions}
@item @ref{%gi-method-short-names-skip}
@item @ref{%syntax-name-protect-prefix}
@item @ref{%syntax-name-protect-postfix}
@item @ref{%syntax-name-protect-renamer}
@end table
@end indentedblock


@subheading Description

G-Golf utilities low level API.@*


@subheading Procedures



@anchor{g-studly-caps-expand}
@deffn Procedure g-studly-caps-expand str

Returns a string.

Given a @samp{@uref{@value{UWIKI-CAMELCASE}, Camel Case}} string, this
procedure@footnote{This procedure, as well as @ref{g-name->name} and
@ref{g-name->class-name} come from @uref{@value{UGG}, Guile-Gnome},
where there are named @code{GStudlyCapsExpand},
@code{gtype-name->scm-name} and @code{gtype-name->class-name}, in the
(Guile-Gnome) module (gnome gobject utils).  In G-Golf, these will also
be used to transform other (Gobject Inptrospection given) names, such as
function names, hence their @code{g-name->} prefix instead} returns a
new string, with all @samp{_} transformed into @samp{-}, uppercase
letters are transformed into their corresponding lowercase letter, and a
@code{#\-} is inserted in between occurrences of two consecutive
uppercase letters, unless the sequence analysed is part of a prefix
defined in the @ref{%g-studly-caps-expand-token-exceptions} alist.

Here are two examples:

@lisp
(g-studly-caps-expand "GStudlyCapsExpand")
@print{}
$2 = "g-studly-caps-expand"
@end lisp

@lisp
(g-studly-caps-expand "WebKitWebContext")
@print{}
$3 = "webkit-web-context"
@end lisp
@end deffn


@anchor{g-name->name}
@anchor{g-name->short-name}
@anchor{g-name->class-name}
@deffn Procedure g-name->name g-name [as-string? #f]
@deffnx Procedure g-name->short-name g-name g-parent-name [as-string? #f]
@deffnx Procedure g-name->class-name g-name

Return a symbol name (or a string for the former, if the optional
parameter is not @code{#f}).

@ref{g-name->name} first obtains the scheme representation string for
@var{g-name}, by looking for a possible entry in
@ref{%g-name-transform-exceptions}, or if it failed, by calling
@ref{g-studly-caps-expand}. If the optional @var{as-string?} is not
@code{#f}, it returns that string, otherwise, it returns its symbol
name, by calling @code{string->symbol}.

@ref{g-name->short-name} returns a (method) short name for @var{g-name},
obtained by dropping the prefix given by @var{g-parent-name} - which is
the container (class) name - or its plural form, and its trailing #\_
(underscore) delimiter. For example:

@lisp
(g-name->shortname "gdk_event_get_event_type" "GdkEvent")
@print{}
$2 = get-event-type

(g-name->shortname "gdk_events_get_angle" "GdkEvent")
@print{}
$3 = get-angle
@end lisp

@ref{g-name->class-name} calls g-name->name, surrounds the result using
@code{#\<} and @code{#\>} characters then calls
@code{string->symbol}. For example:

@lisp
(g-name->class-name "GtkWindow")
@print{}
$4 = <gtk-window>
@end lisp
@end deffn


@anchor{gi-type-tag->ffi}
@deffn Procedure gi-type-tag->ffi type-tag

Returns an integer or @code{'*} (the symbol @code{*}).

Obtains the correponding Guile's ffi tag value for @var{type-tag}, which
must be a member of @ref{%gi-type-tag}.  If @var{type-tag} is unknown,
an exception is raised. Note that Guile's ffi tag values are integers or
@code{'*} (the symbol @code{*}, used by convention to denote pointer
types.
@end deffn


@anchor{gi-type-tag->init-val}
@deffn Procedure gi-type-tag->init-val type-tag

Returns the default init value for @var{type-tag}.

Obtains and returns the default init value for @var{type-tag}, which
will either be @code{0} (zero), or @code{%null-pointer}.
@end deffn


@anchor{syntax-name->method-name}
@deffn Procedure syntax-name->method-name name

Returns a (symbol) name.

This procedure is used to @samp{protect} syntax names, from being
redefined as generic functions and methods.

Users should normally not call this procedure - except for testing
purposes, if/when they customize its default settings - it is
appropriately and automatically called by G-Golf when importing a GI
typelib.

Unless otherwise specified (see @ref{%gi-method-short-names-skip}),
when a GI typelib is imported, G-Golf also creates so called short name
methods, obtained by dropping the container name (and its trailing
hyphen) from the GI typelib method full/long names.

GI methods are added to their respective generic function, which is
created if it does not already exist. When a generic function is
created, G-Golf checks if the name is used, and when it is bound to a
procedure, the procedure is 'captured' into an unspecialized method,
which is added to the newly created generic function.

However, when the name is used but its variable value is a syntax, the
above can't be done and the name must be @samp{protected}, which is what
@ref{syntax-name->method-name} does, using a renamer, or by adding a
prefix, a postfix or both to its (symbol) @var{name} argument.

By default, the renamer (@ref{%syntax-name-protect-renamer}) and prefix
(@ref{%syntax-name-protect-prefix}) variables are set to @code{#f}. The
the postfix (@ref{%syntax-name-protect-postfix}) variable is set to
@code{_} (the underscore symbol).

As an example, using these default settings, the short name method for
@code{gcr-secret-exchange-begin} would be @code{begin_}.

@c If the @code{(ice-9 receive)} has also been imported, then the short
@c name method for @code{gcr-secret-exchange-receive} would be
@c @code{receive_}, otherwise, since there would be no syntax name
@c @samp{clash}, it would be @code{receive}.
@end deffn


@subheading Variables

@anchor{%g-name-transform-exceptions}
@defvar %g-name-transform-exceptions

Contains an alist where each @code{key} is a @code{GType} name exception
for the @ref{g-name->name} procedure, and the corresponding @code{value}
is the name @ref{g-name->name} should use instead.

Its default value contains an entry for @code{GObject}, which should not
(never) be removed:

@lisp
(define %g-name-transform-exceptions
  '(("GObject" . "gobject")))
@end lisp

@c However currently it is an exmpty list@footnote{@uref{@value{UGG},
@c Guile-Gnome} defines a relatively long list of those GType name
@c exceptions, including GEnum, but I'm still not sure about what G-Golf
@c will do and currently decided not to apply any exception.  Will this
@c change in the future? Maybe, but it will become stable before G-Golf
@c 1.0.}.
@end defvar


@anchor{%g-studly-caps-expand-token-exceptions}
@defvar %g-studly-caps-expand-token-exceptions

Contains an alist where each @code{key} is a @code{token} exception for
the @ref{g-studly-caps-expand} procedure, and the corresponding
@code{value} the string that @ref{g-studly-caps-expand} will use for
that @code{token} transformation instead.

Its default value contains an entry for the @code{WebKit} token:

@lisp
(define %g-studly-caps-expand-token-exceptions
  '(("WebKit" . "webkit")))
@end lisp

Users may add or remove alist pairs to satisfy their needs.
@end defvar


@anchor{%gi-method-short-names-skip}
@defvar %gi-method-short-names-skip

This variable is used by G-Golf to decide, while importing a GI typelib,
if a short name method should be created or not (@samp{skipped}, hence
the variable name).

It can take the following values:

@indentedblock
@table @code

@item '()
This is the default value. In this case, a short name method is created
for every full/long name method, or in other words, no short name method
creation process is skipped.

@item 'all
In this case, no short name method is created, or in other words, all
short name method creation process is skipped.

@item a list of short name(s)
In this case, for each short name in the list, the short name method
creation process is skipped.
@end table
@end indentedblock

@end defvar


@anchor{%syntax-name-protect-prefix}
@anchor{%syntax-name-protect-postfix}
@anchor{%syntax-name-protect-renamer}
@defvar %syntax-name-protect-prefix
@defvarx %syntax-name-protect-postfix
@defvarx %syntax-name-protect-renamer

These variables are used by @ref{syntax-name->method-name} and may be
customized. Their default values are:

@indentedblock
@table @var
@item %syntax-name-protect-prefix #f
@item %syntax-name-protect-postfix '_ (the underscore symbol)
@item %syntax-name-protect-renamer #f
@end table
@end indentedblock

@var{%syntax-name-protect-prefix} and @var{%syntax-name-protect-postfix}
may be defined as @code{#f} or a symbol name. Unless a renamer is set,
at least one of these two variables must be defined as a symbol name.

The @var{%syntax-name-protect-renamer} may be defined as @code{#f} or a
procedure, that takes one argument - a symbol name - and returns a
symbol name.

@ref{syntax-name->method-name} first checks for a
@var{%syntax-name-protect-renamer}, and calls it if it has been defined,
igoring the other variables.

Otherwise, @ref{syntax-name->method-name} returns a symbol name prefixed
using @var{%syntax-name-protect-prefix} when not @code{#f} and/or
postfixed using @var{%syntax-name-protect-postfix} when not @code{#f}.
As mentioned above, unless a renamer is set, at least one of these two
variables must be defined as a symbol name.
@end defvar
