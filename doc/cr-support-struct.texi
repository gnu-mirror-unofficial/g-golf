@c -*-texinfo-*-
@c This is part of the GNU G-Golf Reference Manual.
@c Copyright (C) 2019 - 2020 Free Software Foundation, Inc.
@c See the file g-golf.texi for copying conditions.


@node Struct
@subsection Struct

G-Golf class, accessors, methods and procedures to deal with C struct
types.


@subheading Classes

@indentedblock
@table @code
@item @ref{<gi-struct>}
@end table
@end indentedblock


@subheading Procedures and Accessors

@indentedblock
@table @code
@item @ref{!g-name_}
@item @ref{!name____}
@item @ref{!alignment}
@item @ref{!size}
@item @ref{!is-gtype-struct?}
@item @ref{!is-foreign?}
@item @ref{!field-types}
@item @ref{!scm-types}
@item @ref{!init-vals}
@item @ref{!is-opaque?}
@item @ref{!is-semi-opaque?}
@end table
@end indentedblock


@subheading Description

G-Golf class, accessors, methods and procedures to deal with C struct
types.


@subheading Classes

@anchor{<gi-struct>}
@deftp Class <gi-struct>

The @code{<gi-struct>} class is a subclass of @code{<struct>}.  Its
@code{class-direct-slots} are:

@indentedblock
@table @code
@item @emph{g-name}
#:accessor !g-name @*
#:init-keyword #:g-name

@item @emph{name}
#:accessor !name

@item @emph{alignment}
#:accessor !alignment @*
#:init-keyword #:alignment

@item @emph{size}
#:accessor !size @*
#:init-keyword #:size

@item @emph{is-gtype-struct?}
#:accessor !is-gtype-struct? @*
#:init-keyword #:is-gtype-struct?

@item @emph{field-types}
#:accessor !field-types @*
#:init-keyword #:field-types

@item @emph{scm-types}
#:accessor !scm-types

@item @emph{init-vals}
#:accessor !init-vals

@item @emph{is-opaque?}
#:accessor !is-opaque?

@item @emph{is-semi-opaque}
#:accessor !is-semi-opaque?
@end table
@end indentedblock

The @code{name} and @code{scm-types} slots are automatically
initialized.

Instances of the @code{<gi-struct>} are immutable (to be precise, there
are not meant to be mutated, see @ref{GOOPS Notes and Conventions},
'Slots are not Immutable').
@end deftp


@subheading Procedures and Accessors

@anchor{!g-name_}
@anchor{!name____}
@anchor{!alignment}
@anchor{!size}
@anchor{!is-gtype-struct?}
@anchor{!is-foreign?}
@anchor{!field-types}
@anchor{!scm-types}
@anchor{!init-vals}
@deffn Accessor !g-name (inst <gi-struct>)
@deffnx Accessor !name (inst <gi-struct>)
@deffnx Accessor !alignment (inst <gi-struct>)
@deffnx Accessor !size (inst <gi-struct>)
@deffnx Accessor !is-gtype-struct? (inst <gi-struct>)
@deffnx Accessor !field-types (inst <gi-struct>)
@deffnx Accessor !scm-types (inst <gi-struct>)
@deffnx Accessor !init-vals (inst <gi-struct>)

Returns the content of their respective slot for @var{inst}.
@end deffn


@anchor{!is-opaque?}
@deffn Accessor !is-opaque? (inst <gi-struct>)

Returns @code{#t} if @var{inst} is @samp{opaque}, otherwise,
it returns @code{#f}.

A <gi-struct> instance is said to be @samp{opaque} when the call to
@code{g-struct-info-get-size} upon its GIStructInfo pointer returns
@code{zero}. In scheme, these <gi-struct> instances have no fields.

@samp{Opaque} boxed types should never be @samp{decoded}, nor
@samp{encoded}. Instead, procedures, accessors and methods should
@samp{blindingly} receive, pass and/or return their pointer(s).
@end deffn


@anchor{!is-semi-opaque?}
@deffn Accessor !is-semi-opaque? (inst <gi-struct>)

Returns @code{#t} if @var{inst} is @samp{semi-opaque}, otherwise,
it returns @code{#f}.

A <gi-struct> instance is said to be @samp{semi-opaque} when one of its
field types is @code{void}.

@samp{Semi-opaque} boxed types should never be @samp{decoded}, nor
@samp{encoded}. Instead, procedures, accessors and methods should
@samp{blindingly} receive, pass and/or return their pointer(s).
@end deffn
