@c -*-texinfo-*-
@c This is part of the GNU G-Golf Reference Manual.
@c Copyright (C) 2016 - 2019 Free Software Foundation, Inc.
@c See the file g-golf.texi for copying conditions.


@c @node API Overview
@c @subsection API Overview


@subheading G-Golf Low Level API

The G-Golf low level API provides a one to one binding to (some of) the
@code{Glib}, @code{GObject} and (most of) the @code{GObject
Introspection} functions, using the @samp{original} name, except that
@code{_} are replaced by @code{-}.

At this low level API, both arguments and returned values are pointers,
except for enums, strings, numbers and booleans. This is also true for
the minimal ’bootstrap’ bindings G-golf must implement for @code{Glib},
@code{GObject} and @code{Gdk}.

Here is an example:

@lisp
,use (g-golf)
(g-irepository-require "Clutter")
@print{}
$2 = #<pointer 0x1681600>
@end lisp

In addition, other procedures, syntax, vriables, classes and methods are
also provided and part of the so called low level API, that use the
above mentioned bindings in order to import, build and make @code{GIR}
libraries functionality available from @uref{@value{UGUILE}, Guile}.


@subheading G-Golf High Level API

G-Golf also provides a high level API, mostly based on @code{GOOPS}
(@pxref{GOOPS,,, guile, The GNU Guile Reference Manual}), largely
inspired by @uref{@value{UGG}, Guile-Gnome}.

@c Actually, the intention is precisely that G-Golf high level API follows
@c (entirely) @uref{@value{UGG}, Guile-Gnome} naming conventions for
@c classes, slot names, generic functions and methods ... It might not be
@c possible to be 100% compatible with Guile-Gnome though, but that is the
@c objective, and otherwise to complete it @samp{as far as possible}.

@c @indentedblock
@c @strong{Special Note:}

@c This means that somewhere in between this initial @value{VERSION}
@c version and 0.1.0, or maybe 0.2.0, we probably will break the statement
@c we made i the previous section (that low lvel API returns pointers ...),
@c so that where ever appropriate, arguments and returned values will
@c become GOOPS classes and instances for the G-Golf low level API as well.

@c Once we will be happy with the design and will have tested it on a
@c wrapper, let's say @code{Clutter}, once we will have fixed all manual
@c entries, then we will remove this special note.

@c Till then, code and design review is more then welcome, testing upon the
@c gnome library of your choice is welcome too, but be well aware of this
@c special note, and keep in mind that things may change in a way that
@c either version 0.1.0 or 0.2.0 will probably break earlier G-Golf user
@c code, that you must consider, till then, experimental.
@c @end indentedblock

@c Until the above @strong{Special Note} disappears from G-Golf's Reference
@c Manual, you won't be able to try the following code snipset, but here is
@c what you will be able to do, at least this is the idea, once the higher
@c level API will exist:

Just to illustrate the above words here is a simple example, that
imports the @code{Clutter} namespace, initialize clutter and creates
a clutter stage:

@lisp
,use (g-golf)
(gi-import "Clutter")
(clutter-init 0 '())
@print{}
$2 = success
$3 = 0
$4 = ()

(make <clutter-stage>)
@print{}
$5 = #<<clutter-stage> 5566dd378240>
@end lisp


@include api-naming-conventions.texi
@include api-pro-doc-struct.texi
@include api-goops-notes-and-conventions.texi
