@c -*-texinfo-*-
@c This is part of the GNU G-Golf Reference Manual.
@c Copyright (C) 2016 - 2018 Free Software Foundation, Inc.
@c See the file g-golf.texi for copying conditions.


@c @node API Overview
@c @subsection API Overview


@subheading G-Golf Low Level API

The G-Golf low level API provides a one to one binding to (most of) the
@code{GObject Introspection} functions, renamed as appropriate (see
@ref{Naming Conventions}).  At this low level API, both arguments and
returned values are pointers, except for enums, strings, numbers and
booleans. This is also true for the minimal ’bootstrap’ bindings G-golf
must implement for @code{Glib} and @code{GObject}.

Here is an example:

@lisp
,use (g-golf gi)
(g-golf-ir-require "Clutter")
@print{}
$2 = #<pointer 0x1681600>
@end lisp


@subheading G-Golf High Level API

G-Golf will also provide a higher level API, using @code{GOOPS}
(@pxref{GOOPS,,, guile, The GNU Guile Reference Manual}), as it has been
done for @uref{@value{UGG}, Guile-Gnome}.

Actually, the intention is precisely that G-Golf high level API follows
(entirely) @uref{@value{UGG}, Guile-Gnome} naming conventions for
classes, slot names, generic functions and methods ... It might not be
possible to be 100% compatible with Guile-Gnome though, but that is the
objective, and otherwise to complete it @samp{as far as possible}.

@c @indentedblock
@c @strong{Special Note:}

@c This means that somewhere in between this initial @value{VERSION}
@c version and 0.1.0, or maybe 0.2.0, we probably will break the statement
@c we made i the previous section (that low lvel API returns pointers ...),
@c so that where ever appropriate, arguments and returned values will
@c become GOOPS classes and instances for the G-Golf low level API as well.

@c Once we will be happy with the design and will have tested it on a
@c wrapper, let's say @code{Clutter}, once we will have fixed all manual
@c entries, then we will remove this special note.

@c Till then, code and design review is more then welcome, testing upon the
@c gnome library of your choice is welcome too, but be well aware of this
@c special note, and keep in mind that things may change in a way that
@c either version 0.1.0 or 0.2.0 will probably break earlier G-Golf user
@c code, that you must consider, till then, experimental.
@c @end indentedblock

@c Until the above @strong{Special Note} disappears from G-Golf's Reference
@c Manual, you won't be able to try the following code snipset, but here is
@c what you will be able to do, at least this is the idea, once the higher
@c level API will exist:

Once G-Golf has its high level API ready, the idea is that you should be
able to just use any @samp{gir library}, such as @code{Clutter}. Here is
a simple @samp{simulation} example@footnote{Yu won't b able to try this
example now, since there is no high level API i G-Golf yet, but so you
get the idea @dots{}}:

@lisp
,use (g-golf gi)
(g-golf-import "Clutter")

(make <clutter-stage>)
@print{}
$3 = #<<clutter-stage> 22782a0>
@end lisp

@c Or even better:

@c @lisp
@c ,use (g-golf clutter)
@c (make <clutter-stage>)
@c @print{}
@c $3 = #<<clutter-stage> 22782a0>
@c @end lisp


@node Naming Conventions
@subsection Naming Conventions


@subheading GI Funtions

G-Golf low level API procedure names that bind a GI function always start
with @code{g-golf-}, followed by two letters and an hyphen, representing
the GObject Introspection section (@xref{Abreviations}), followed by the
section function name it implements. For example, from the GIRepository
section:

@example
g_irepository_get_loaded_namespaces
->
@ref{g-golf-ir-get-loaded-namespaces}
@end example


@subheading GI Types and Values

G-Golf low level API variables that bind GI types and values use the
exact same convention as for procedures, except that they always start
with @code{%g-golf-}.  For example, from the GIBaseInfo section:

@example
GIInfoType
->
@ref{%g-golf-bi-info-type}
@end example

Note: The G-Golf Reference Manual follows the GObject Introspection
manual and list 'Types and Values' in their corresponding section. for
example @ref{Base Info}. However, in the G-Golf source code, all 'Types
and Values' are defined in the @code{(g-golf gi types)} module, which we
think is more convenient both for developers and G-Golf users.


@subheading G-Golf

G-Golf does not just bind the @code{GObject Introspection} library, that
would not buy us much.  It comes with its own set of procedures, syntax
and variables, aimed at not just reading a typelib, but making its
functionality available from @uref{@value{UGUILE}, Guile}.

G-Golf procedure and syntax names also always start with @code{g-golf-}
followed by their name: the name, however, will never start neither
contain anywhere else the two reserved letters followed by a hyphen used
for @code{GI}, @code{Glib} and @code{GObject} functions, types and
variable (@xref{Abreviations}).

G-Golf variables follow the same above described rule except that their
name starts with @code{%g-golf-}.


@subheading Exceptions

There are two exceptions with respect to the naming conventions
described above:

@enumerate a
@item
procedure names that start with @code{call-with-input-},
@code{call-with-output-} followed by a GI, Glib or GObject type, such
as:

@example
@ref{call-with-input-typelib}
@end example

@item
syntax names that start as @code{with-} followed by a GI, Glib or GObject
type, such as:

@example
with-gerror @c @ref{with-gerror}
@end example
@end enumerate


@subheading Gnome Libraries

Imported Gnome libraries will follow @uref{@value{UGG}, Guile-Gnome}'s
naming conventions, from which it will actually reuse the functionality
developed at the time (see @uref{@value{UGGMGOG}, 9.1.1 Mapping class
libraries to scheme} and @uref{@value{UGGMGOU}, 10.2 Usage} in @emph{the
GNU Guile-Gnome: GObject Refence Manual}). For example, the following
names would be transformed like this:

@lisp
ClutterActor -> clutter-actor
clutter_actor_new -> clutter-actor-new
clutter_actor_hide -> clutter-actor-hide
@dots{}
@end lisp

Once G-Golf high level API is also implemented, Gnome libraries GObject
classes and methods will become GOOPS citizen (@pxref{GOOPS,,, guile,
The GNU Guile Reference Manual}), and in the land of generic function
multi methods polimorphic object oriented systems, users just have fun:

@lisp
,use (g-golf gi)
(g-golf-ir-require "Clutter")
@print{}
$2 = #<<gi-typelib> 18237a0>
(make <clutter-actor>)
@print{}
$3 = #<<clutter-actor> 32124b0>
(hide $3)
@dots{}
@end lisp


@include api-abreviations.texi
