@c -*-texinfo-*-
@c This is part of the GNU G-Golf Reference Manual.
@c Copyright (C) 2016 - 2018 Free Software Foundation, Inc.
@c See the file g-golf.texi for copying conditions.


@node Parameters and Values
@subsection Parameters and Values

G-Golf GObject Parameters and Values low level API.@*
Parameters and Values â€” Standard Parameter and Value Types


@subheading Procedures

@indentedblock
@table @code
@item @ref{g-value->g-type-id}
@item @ref{g-value->g-type}
@item @ref{g-value-ref}
@item @ref{g-value-set!}
@item @ref{g-value-get-boolean}
@item @ref{g-value-set-boolean}
@item @ref{g-value-get-int}
@item @ref{g-value-set-int}
@item @ref{g-value-get-uint}
@item @ref{g-value-set-uint}
@item @ref{g-value-get-float}
@item @ref{g-value-set-float}
@item @ref{g-value-get-double}
@item @ref{g-value-set-double}
@item @ref{g-value-get-enum}
@item @ref{g-value-set-enum}
@item @ref{g-value-get-string}
@item @ref{g-value-set-string}
@item @ref{g-value-get-boxed}
@item @ref{g-value-set-boxed}
@item @ref{g-value-get-pointer}
@item @ref{g-value-set-pointer}
@item @ref{g-value-get-object}
@item @ref{g-value-set-object}
@end table
@end indentedblock


@c @subheading Types and Values

@c @indentedblock
@c @table @code
@c @item @ref{%g-type-fundamental-flags}
@c @end table
@c @end indentedblock


@subheading Description

@code{GValue} provides an abstract container structure which can be
copied, transformed and compared while holding a value of any (derived)
type, which is registered as a GType with a GTypeValueTable in its
GTypeInfo structure. Parameter specifications for most value types can
be created as @code{GParamSpec} derived instances, to implement
e.g. @code{GObject properties} which operate on GValue containers.

Parameter names need to start with a letter (a-z or A-Z). Subsequent
characters can be letters, numbers or a '-'. All other characters are
replaced by a '-' during construction.


@subheading Procedures and Methods

Note: in this section, the @var{g-value} arguments are [must be]
pointers to a @code{GValue}.


@anchor{g-value->g-type-id}
@deffn Procedure g-value->g-type-id g-value

Returns a integer.

Gets and returns the @code{GType} for @var{g-value}.
@end deffn


@anchor{g-value->g-type}
@deffn Procedure g-value->g-type g-value

Returns a symbol.

Gets and returns the scheme representation (a symbol) of the
@code{GType} for @var{g-value}.
@end deffn


@anchor{g-value-ref}
@deffn Procedure g-value-ref g-value

Returns the content of @var{g-value}.

Gets and returns the content of @var{g-value}.  Supported @code{GType}
(their scheme representaion) for @var{g-value} are: @code{boolean},
@code{int}, @code{uint}, @code{float}, @code{string}, @code{pointer},
@code{object}.
@end deffn


@anchor{g-value-set!}
@deffn Procedure g-value-set! g-value value

Returns nothing.

Sets the content of @var{g-value} to @var{value}.  Supported
@code{GType} (their scheme representaion) for @var{g-value} are:
@code{boolean}, @code{int}, @code{uint}, @code{float}, @code{string},
@code{pointer}, @code{object}.

Note that this procedure cannot cope with invalid values (the type of
@var{value} must correspond to the @code{GType} for @var{g-value},
otherwise it will most likely lead to a crash.
@end deffn


@anchor{g-value-get-boolean}
@deffn Procedure g-value-get-boolean g-value

Returns @code{#t} or @code{#f}.

Gets the content of @var{g-value} and returns @code{#f} if it is
@code{0}, otherwise it returns @code{#t}.
@end deffn


@anchor{g-value-set-boolean}
@deffn Procedure g-value-set-boolean g-value val

Returns nothing.

Sets the content of @var{g-value} to @code{0} if @var{val} is
@code{#f}, otherwise sets the content to @code{1}.
@end deffn


@anchor{g-value-get-int}
@deffn Procedure g-value-get-int g-value

Returns a integer.

Gets and returns the content of @var{g-value}.
@end deffn


@anchor{g-value-set-int}
@deffn Procedure g-value-set-int g-value int

Returns nothing.

Sets the content of @var{g-value} to @var{int}.
@end deffn


@anchor{g-value-get-uint}
@deffn Procedure g-value-get-uint g-value

Returns an unsigned integer.

Gets and returns the content of @var{g-value}.
@end deffn


@anchor{g-value-set-uint}
@deffn Procedure g-value-set-uint g-value uint

Returns nothing.

Sets the content of @var{g-value} to @var{uint}.
@end deffn


@anchor{g-value-get-float}
@deffn Procedure g-value-get-float g-value

Returns a float.

Gets and returns the content of @var{g-value}.
@end deffn


@anchor{g-value-set-float}
@deffn Procedure g-value-set-float g-value float

Returns nothing.

Sets the content of @var{g-value} to @var{float}.
@end deffn


@anchor{g-value-get-double}
@deffn Procedure g-value-get-double g-value

Returns a double.

Gets and returns the content of @var{g-value}.
@end deffn


@anchor{g-value-set-double}
@deffn Procedure g-value-set-double g-value double

Returns nothing.

Sets the content of @var{g-value} to @var{double}.
@end deffn


@anchor{g-value-get-enum}
@deffn Procedure g-value-get-enum g-value

Returns a symbol.

Gets and returns the (registered) enum type info symbol for
@var{g-value}.
@end deffn


@anchor{g-value-set-enum}
@deffn Method g-value-set-enum g-value (id <integer>)
@deffnx Method g-value-set-enum g-value (sym <symbol>)

Returns nothing.

Sets the content of @var{g-value} to @var{id}, or to the id
corresponding to @var{sym} respectively.  The @var{id} or the @var{sym}
must be valid (as in being a valid member of the (registered) enum type
info for @var{g-value}), otherwise an exception is raised.
@end deffn


@anchor{g-value-get-string}
@deffn Procedure g-value-get-string g-value

Returns a string.

Gets and returns the content of @var{g-value}.
@end deffn


@anchor{g-value-set-string}
@deffn Procedure g-value-set-string g-value str

Returns nothing.

Sets the content of @var{g-value} to @var{str}.
@end deffn


@anchor{g-value-get-boxed}
@deffn Procedure g-value-get-boxed g-value

Returns a list.

Gets and returns the content of @var{g-value}.
@end deffn


@anchor{g-value-set-boxed}
@deffn Procedure g-value-set-boxed g-value boxed

Returns nothing.

Sets the content of @var{g-value} to @var{boxed}.
@end deffn


@anchor{g-value-get-pointer}
@deffn Procedure g-value-get-pointer g-value

Returns a pointer.

Gets and returns the content of @var{g-value}.
@end deffn


@anchor{g-value-set-pointer}
@deffn Procedure g-value-set-pointer g-value pointer

Returns nothing.

Sets the content of @var{g-value} to @var{pointer}.
@end deffn


@anchor{g-value-get-object}
@deffn Procedure g-value-get-object g-value

Returns a pointer.

Gets and returns the content of @var{g-value}.
@end deffn


@anchor{g-value-set-object}
@deffn Procedure g-value-set-object g-value object

Returns nothing.

Sets the content of @var{g-value} to @var{object} (a pointer to a
@code{GObject} instance) and increases the @var{object} reference count.
@end deffn


@c @subheading Types and Values

