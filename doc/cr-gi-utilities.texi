@c -*-texinfo-*-
@c This is part of the GNU G-Golf Reference Manual.
@c Copyright (C) 2016 - 2020 Free Software Foundation, Inc.
@c See the file g-golf.texi for copying conditions.


@c @defindex tl


@node Utilities
@subsection Utilities

G-Golf GObject Introspetion Utilities low level API.@*


@subheading Procedures and Syntax

@indentedblock
@table @code
@item @ref{gi-pointer-new}
@item @ref{gi-pointer-inc}
@item @ref{gi-attribute-iter-new}
@item @ref{with-gerror}
@item @ref{gi->scm}
@item @ref{gi-boolean->scm}
@item @ref{gi-string->scm}
@item @ref{gi-strings->scm}
@item @ref{gi-csv-string->scm}
@item @ref{gi-pointer->scm}
@item @ref{gi-glist->scm}
@item @ref{gi-gslist->scm}
@end table
@end indentedblock


@subheading Types and Values

@indentedblock
@table @code
@item @ref{%gi-pointer-size}
@end table
@end indentedblock


@c @subheading Struct Hierarchy

@c @indentedblock
@c GIBaseInfo           	       		@*
@c @ @ +--- GIRegisteredTypeInfo  		@*
@c @ @ @ @ @ @ @ @ @ @ @  +--- GIEnumInfo
@c @end indentedblock


@subheading Description

G-Golf GObject Introspection utilities low level API.@*


@subheading Procedures and Syntax


@anchor{gi-pointer-new}
@deffn Procedure gi-pointer-new

Returns a newly allocated (Glib) pointer.
@end deffn


@anchor{gi-pointer-inc}
@deffn Procedure gi-pointer-inc pointer [#:offset %gi-pointer-size]

Returns a foreign pointer object pointing to the address of
@var{pointer} increased by @var{offset}.
@end deffn


@anchor{gi-attribute-iter-new}
@deffn Procedure gi-attribute-iter-new

Returns a pointer.

Creates and returns a foreign pointer to a C struct for a
@code{GIAttributeIter} (a C struct containg four pointers, initialized
to @code{%null-pointer}).
@end deffn


@anchor{with-gerror}
@deffn Procedure with-gerror var body

Returns the result of the execution of @var{body}, or raises an
exception.

@var{var} must be an identifier.  Evaluate @var{body} in a lexical
environment where @var{var} is bound to a pointer to a newly allocated
(and @samp{empty}) @code{GError}. @var{var} will always be freed.  If no
exception is raised, the result of the execution of @var{body} is
returned.

@c Here is an example, taken from the definition of
@c @ref{g-irepository-require}, in the @code{(g-golf gi repository)}
@c module:

@c @lisp
@c (define* (g-irepository-require namespace
@c                                 #:key (version #f)
@c                                 (repository %null-pointer))
@c   (with-gerror g-error
@c 	       (g_irepository_require repository
@c 				      (string->pointer namespace)
@c 				      (if version
@c 					  (string->pointer version)
@c 					  %null-pointer)
@c 				      0
@c 				      g-error)))
@c @end lisp
@end deffn


@anchor{gi->scm}
@deffn Procedure gi->scm value type

Returns the scheme representation of @var{value}.

The accepted @var{type} symbols (also called @code{tags} in the
@code{GI} terminology@footnote{All (G-Golf) procedures that accept a GI
tag as an argument will accept the tag as an integer (the GI
representation) or a symbol (the scheme representation).  All (G-Golf)
procedures that return a tag will always return the scheme
representation.}) are:

@indentedblock
@table @code
@item boolean
The GType of @var{value} is @code{gboolean}.  The returned value is
@code{#t} or @code{#f}.

@item string
The GType of @var{value} is @code{*gchar}.  The returned value is a
string or @code{#f} (when @var{value} is the @code{%null-pointer}).

@item n-string
@itemx strings

The GType of @var{value} is @code{**gchar} (an array of pointers to
@code{*gchar}), returned as a list of strings, which can be empty (when
@var{value} is the @code{%null-pointer}).

@item csv-string
The GType of @var{value} is @code{*gchar}. The returned value is a list
of strings, obtained by splitting @var{value} using @code{#\,} as the
@code{char-pred}, or @code{#f} (when @var{value} is the
@code{%null-pointer}).

@item pointer
The GType of @var{value} is @code{gpointer}. The returned value is a
pointer or @code{#f} (when @var{value} is the @code{%null-pointer}).

@item glist
The GType of @var{value} is @code{glist}. The returned value is a
(possibly empty) list of items contained in the glist pointed by
@var{value}.

@c Note: currently, the only supported item type is @code{object} (which
@c implies that the @var{type} argument is a type description as documented
@c below (see @ref{gi-glist->scm}, @ref{gi-gslist->scm}). G-Golf will of
@c course provide translation for all other glist gslist item types, but in
@c the mean time, if you encounter such a missing glist gslist item type,
@c please @ref{Contact} us so we immediately fix that for you.

@item gslist
The GType of @var{value} is @code{gslist}. The returned value is a
(possibly empty) list of items contained in the glist pointed by
@var{value}.

@c Note: currently, the only supported item type is @code{object} (which
@c implies that the @var{type} argument is a type description as documented
@c below (see @ref{gi-glist->scm}, @ref{gi-gslist->scm}). G-Golf will of
@c course provide translation for all other glist gslist item types, but in
@c the mean time, if you encounter such a missing glist gslist item type,
@c please @ref{Contact} us so we immediately fix that for you.

@end table
@end indentedblock
@end deffn


@anchor{gi-boolean->scm}
@deffn Procedure gi-boolean->scm value

Returns @code{#t} or @code{#f}.

The GType of @var{value} is @code{gboolean}.
@end deffn


@anchor{gi-string->scm}
@deffn Procedure gi-string->scm value

Returns a string or @code{#f}.

The GType of @var{value} is @code{gchar*}. When @var{value} is the
@code{%null-pointer}, the procedure returns @code{#f}.
@end deffn


@anchor{gi-strings->scm}
@deffn Procedure gi-strings->scm value

Returns a list of strings (which can be empty).

The GType of @var{value} is @code{gchar**} (an array of pointers to
@code{*gchar}).
@end deffn


@anchor{gi-csv-string->scm}
@deffn Procedure gi-csv-string->scm value

Returns a list of strings or @code{#f}.

The GType of @var{value} is @code{gchar*}.  When the returned value is a
list of strings, it is obtained by splitting @var{value} using
@code{#\,} as the @code{char-pred}.  When @var{value} is the
@code{%null-pointer}, the procedure returns @code{#f}.
@end deffn


@anchor{gi-pointer->scm}
@deffn Procedure gi-pointer->scm value

Returns a pointer or @code{#f}.

The GType of @var{value} is @code{gpointer}.  When @var{value} is the
@code{%null-pointer}, the procedure returns @code{#f}.
@end deffn


@anchor{gi-glist->scm}
@anchor{gi-gslist->scm}
@deffn Procedure gi-glist->scm g-list type-desc
@deffnx Procedure gi-gslist->scm g-slist type-desc

Returns a list.

Obtains and returns a (possibly empty) list composed of the scheme
representation of the @code{data} field of ech element of @var{g-list}
or @var{g-slist} respectively.

The @var{type-desc} is a list composed of the @var{g-list} or
@var{g-slist} type tag, @code{'interface} if the list element param-tag
is interface or #f otherwise, the interface description (if the previous
is not #f), followed by a boolean which is #t if the g-list (g-slist)
@code{data} field is a pointer, #f otherwise.

An interface description is a list composed of the interface GI type
tag, the G-Golf type name, the G-Golf type, the g-type id and a boolean
which is #t if the last three values have been verified@footnote{It
happens, due to the (unspecified) order at which @samp{things} are
imported from a GI typelib, that a G-Golf class or instance hasn't been
finalized when the procedure or method is being imported, hence these
must be verified, which is done at the first (and only once) procedure
or method call.}. As an example, here is the type description of the
returned value for @code{clutter-actor-get-children}:

@lisp
(glist
 interface
 (object
  <clutter-actor>
  #<<gobject-class> <clutter-actor> 561c2e9c2960>
  94679044057632
  #f)
 #f)
@end lisp
@end deffn


@subheading Types and Values


@anchor{%gi-pointer-size}
@defvar %gi-pointer-size

The size (the number of bytes) that a (Glib) pointer occupies in memory
(which is architecture dependent).
@end defvar
