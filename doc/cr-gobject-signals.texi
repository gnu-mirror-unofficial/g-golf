@c -*-texinfo-*-

@c This is part of the GNU G-Golf Reference Manual.
@c Copyright (C) 2019 - 2021 Free Software Foundation, Inc.
@c See the file g-golf.texi for copying conditions.


@node Signals
@subsection Signals

G-Golf GObject Signals low level API.@*
Signals â€” A means for customization of object behaviour and a general
purpose notification mechanism


@subheading Procedures

@indentedblock
@table @code
@item @ref{g-signal-query}
@item @ref{g-signal-lookup}
@item @ref{g-signal-list-ids}
@item @ref{g-signal-parse-name}
@end table
@end indentedblock


@subheading Types and Values

@indentedblock
@table @code
@item @ref{%g-signal-flags}
@end table
@end indentedblock


@subheading Description

The basic concept of the signal system is that of the emission of a
signal. Signals are introduced per-type and are identified through
strings. Signals introduced for a parent type are available in derived
types as well, so basically they are a per-type facility that is
inherited.

Please read the @uref{@value{UGOBJECT-Signals}, Signals} section from
the GObject reference manual for a complete description.


@subheading Procedures


@anchor{g-signal-query}
@deffn Procedure g-signal-query id

Returns a list.

Obtains and returns a list composed of the signal id, name,
interface-type@footnote{Within this context, the interface-type is the
@code{GType} of the @code{GObject} subclass the signal is @samp{attached
to} - knowing that signals are inhereted.}, flags, return-type, number
of arguments and their types. For example@footnote{At least one
@code{GObject} subclass instance must have been created prior to attempt
to query any of its class signal(s).}:

@lisp
,use (g-golf)
(gi-import "Clutter")

(make <clutter-actor>)
@result{} $2 = #<<clutter-actor> 565218c88a80>

(!g-type (class-of $2))
@result{} $3 = 94910597864000

(g-signal-list-ids $3)
@result{} $4 = (5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30)

(g-signal-query 20)
@result{} $5 = (20 "enter-event" 94910597864000 (run-last) boolean 1 (boxed))
@end lisp

As you may have noticed, the signal query argument(s) list does not
include the instance (and its type) upon which the signal is called, but
both at C level and within the context of @code{GClosure}, callbacks
must assume that the instance upon which a signal is called is always
the first argument of the callback.
@end deffn


@anchor{g-signal-lookup}
@deffn Procedure g-signal-lookup name g-type

Returns an integer.

Obtains and returns the signal's identifying integer, given the
@var{name} of the signal and the object @var{g-type} it connects to. If
a signal identifier can't be find for the given @var{name} and
@var{g-type}, an exception is raised.
@end deffn


@anchor{g-signal-list-ids}
@deffn Procedure g-signal-list-ids g-type

Returns a list of integers.

Obtains and returns the list of signal's identifying integers for
@var{g-type} (Note that at least one @var{g-type} instance must have
been created prior to attempt to list or query signal's identifying
integers for a given @var{g-type}).
@end deffn


@anchor{g-signal-parse-name}
@deffn Procedure g-signal-parse-name detailed-signal g-type @
                                     [force-detail-quark #t]

Returns two integer values.

Obtains and returns the signal-id and a detail corresponding to
@var{detailed-signal} for @var{g-type}. The @var{detailed-signal} can be
passed as a symbol or a string. When @var{force-detail-quark} is
@code{#t} it forces the creation of a @code{GQuark} for the detail.

If the signal name could not successfully be parsed, it raises an
exception.
@end deffn


@subheading Types and Values


@anchor{%g-signal-flags}
@defivar <gi-enum> %g-signal-flags

The signal flags are used to specify a signal's behaviour, the overall
signal description outlines how especially the RUN flags control the
stages of a signal emission.

An instance of @code{<gi-enum>}, who's members are the scheme
representation of the @code{GSignalFlags}:

@indentedblock
@emph{g-name}: GSignalFlags  @*
@emph{name}: g-signal-flags  @*
@emph{enum-set}:
@indentedblock
@table @code

@item run-first
Invoke the object method handler in the first emission stage.

@item run-last
Invoke the object method handler in the third emission stage.

@item run-cleanup
Invoke the object method handler in the last emission stage.

@item no-recurse
Signals being emitted for an object while currently being in emission
for this very object will not be emitted recursively, but instead cause
the first emission to be restarted.

@item detailed
This signal supports "::detail" appendices to the signal name upon
handler connections and emissions.

@item action
Action signals are signals that may freely be emitted on alive objects
from user code via @code{g-signal-emit} and friends, without the need of
being embedded into extra code that performs pre or post emission
adjustments on the object. They can also be thought of as object methods
which can be called generically by third-party code.

@item no-hooks
No emissions hooks are supported for this signal.

@item must-collect
Varargs signal emission will always collect the arguments, even if there
are no signal handlers connected. Since 2.30.

@item deprecated
The signal is deprecated and will be removed in a future version. A
warning will be generated if it is connected while running with
@code{G_ENABLE_DIAGNOSTIC=1}. Since 2.32.

@end table
@end indentedblock
@end indentedblock
@end defivar
