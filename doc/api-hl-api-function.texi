@c -*-texinfo-*-
@c This is part of the GNU G-Golf Reference Manual.  Copyright (C) 2019
@c Free Software Foundation, Inc.  See the file g-golf.texi for copying
@c conditions.


@c @defindex ei


@node Function
@subsection Function

G-Golf Function import high level API.@*
The G-Golf GI function import high level API.


@subheading Procedures

@indentedblock
@table @code
@item @ref{gi-import-function}
@end table
@end indentedblock


@subheading Variables

@indentedblock
@table @code
@item @ref{%gi-strip-boolean-result}
@end table
@end indentedblock


@c @subheading Description


@subheading Procedures

Note: in this section, the @var{info} argument is [must be] a pointer to
a @code{GIFunctionInfo}.


@anchor{gi-import-function}
@deffn Procedure gi-import-function info

Returns nothing.

Imports @var{info} in Guile and exports its interface.
@end deffn


@subheading Variables


@anchor{%gi-strip-boolean-result}
@defvar %gi-strip-boolean-result

A list of procedure and method names that return either @code{#t} or
@code{#f}, solely to indicate that the procedure or method call was
successful or not, and at least one @code{'inout} or @code{'out}
qargument(s).

These procedures and methods, if (and only if) their name is a member of
@var{%gi-strip-boolean-result}, will see their returned valued eluded if
it is @code{#t}, otherwise, an exception will be raised@footnote{In any
other situation, but void, the returned value comes first, then in
order, if any, the 'inout and/or 'out argument(s).}.

Initially, @var{%gi-strip-boolean-result} is empty, and it is a user
responsibility to fill it appropriately, for each namespace they are
importing.

Here is a concrete example, for the @code{"Clutter"} namespace and
the @code{clutter-color-from-string} procedure:

@lisp
,use (g-golf)
(gi-import "Clutter")
(clutter-color-from-string "Blue")
@print{}
$2 = #t
$3 = (0 0 255 255)
@end lisp

And call it with an undefined color name:

@lisp
(clutter-color-from-string "Bluee")
@print{}
$4 = #f
$5 = (0 0 0 0)
@end lisp

Now, let's add this procedure name to @var{%gi-strip-boolean-result}:

@lisp
(push! 'clutter-color-from-string
       %gi-function-call-strip-boolean-result)
$6 = (clutter-color-from-string)

(clutter-color-from-string "Blue")
@print{}
$7 = (0 0 255 255)
@end lisp

And call it with an undefined color name:

@lisp
(clutter-color-from-string "Bluee")
@print{}
scm-error" "clutter-color-from-string" failed."

Entering a new prompt.  Type `,bt' for a backtrace or `,q' to continue.
@end lisp
@end defvar
