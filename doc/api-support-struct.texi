@c -*-texinfo-*-
@c This is part of the GNU G-Golf Reference Manual.
@c Copyright (C) 2019 Free Software Foundation, Inc.
@c See the file g-golf.texi for copying conditions.


@node Struct
@subsection Struct

@subheading Classes

@indentedblock
@table @code
@item @ref{<gi-struct>}
@end table
@end indentedblock

@subheading Procedures and Methods

@indentedblock
@table @code
@item @ref{!gi-name_}
@item @ref{!scm-name__}
@item @ref{!field-types}
@item @ref{!scm-types}
@item @ref{is-opaque?}
@end table
@end indentedblock


@anchor{<gi-struct>}
@deftp Class <gi-struct>

The @code{<gi-struct>} class is a subclass of @code{<struct>}.  Its
@code{class-direct-slots} are:

@indentedblock
@table @code
@item @emph{gi-name}
#:accessor !gi-name @*
#:init-keyword #:gi-name

@item @emph{scm-name}
#:accessor !scm-name

@item @emph{field-types}
#:accessor !field-types @*
#:init-keyword #:field-types

@item @emph{scm-types}
#:accessor !scm-types
@end table
@end indentedblock

The @code{scm-name} and @code{scm-types} slots are automatically
initialized.

Instances of the @code{<gi-struct>} are immutable (to be precise, there
are not meant to be mutated, see @ref{GOOPS Notes and Conventions},
'Slots are not Immutable').
@end deftp


@anchor{!gi-name_}
@anchor{!scm-name__}
@anchor{!field-types}
@anchor{!scm-types}
@deffn Method !gi-name gi-struct
@deffnx Method !scm-name gi-struct
@deffnx Method !field-types gi-struct
@deffnx Method !scm-types gi-struct

Returns the content of the gi-name, scm-name, field-types or scm-types
slot for @var{gi-struct}, respectively.
@end deffn


@anchor{is-opaque?}
@deffn Method is-opaque? gi-struct

Returns @code{#t} if @var{gi-struct} is @samp{opaque}, otherwise,
it returns @code{#f}.

A <gi-struct> instance is said to be @samp{opaque} when the call to
@code{g-struct-info-get-size} upon its GIStructInfo pointer returns
@code{zero}. In scheme, these <gi-struct> instances have no fields.

@samp{Opaque} boxed types should never be @samp{decoded}, nor
@samp{encoded}. Instead, procedures and methods should @samp{blindingly}
receive, pass and/or return their pointer(s).
@end deffn
