@c -*-texinfo-*-
@c This is part of the GNU G-Golf Reference Manual.
@c Copyright (C) 2016 - 2018 Free Software Foundation, Inc.
@c See the file g-golf.texi for copying conditions.


@node Enum
@subsection Enum

@subheading Classes

@indentedblock
@table @code
@item @ref{<enum>}
@item @ref{<gi-enum>}
@end table
@end indentedblock

@subheading Procedures and Methods

@indentedblock
@table @code
@item @ref{!enum-set}
@item @ref{enum->value}
@item @ref{enum->values}
@item @ref{enum->symbol}
@item @ref{enum->symbols}
@item @ref{enum->name}
@item @ref{enum->names}
@item @ref{!gi-name}
@item @ref{!scm-name}
@end table
@end indentedblock


@anchor{<enum>}
@deftp Class <enum>

The @code{<enum>} class is for enumerated values. Its (unique) slot is:

@indentedblock
@table @code
@item @emph{enum-set}
#:accessor !enum-set @*
#:init-keyword #:enum-set
@end table
@end indentedblock

Notes:

@itemize
@item the @code{enum-set} can't be empty and so you must use the
@code{#:enum-set} (#:init-keyword) when creating new @code{<enum>}
instances;
@ifhtml
@*@*
@end ifhtml

@item
the @code{#:enum-set} (#:init-keyword) accepts either a list of symbols
or a well-formed @code{enum-set};
@ifhtml
@*@*
@end ifhtml

@item
a well-formed @code{enum-set} is a list of @code{(symbol . id)} pairs,
where @code{id} is a positive integer.
@ifhtml
@*@*
@end ifhtml

@item
each @code{symbol} and each @code{id} of an @code{enum-set} must be
unique.
@end itemize

Instances of the @code{<enum>} class are immutable (to be precise, there
are not meant to be mutated, see @ref{GOOPS Notes and Conventions},
'Slots are not Immutable').
@end deftp


@anchor{!enum-set}
@deffn Method !enum-set enum

Returns the content of the enum-set slot for @var{enum}.
@end deffn


@anchor{enum->value}
@anchor{enum->values}
@deffn Method enum->value enum symbol
@deffnx Method enum->values enum

Returns the @var{enum} value for @var{symbol} (or @code{#f} if it does
not exists), or the list of all values for  @var{enum}, respectively.
@end deffn


@anchor{enum->symbol}
@anchor{enum->symbols}
@deffn Method enum->symbol enum value
@deffnx Method enum->symbols enum

Returns the @var{enum} symbol for @var{value} (or @code{#f} if it does
not exists), or the list of all symbols for  @var{enum}, respectively.
@end deffn


@anchor{enum->name}
@anchor{enum->names}
@deffn Method enum->name enum value
@deffnx Method enum->names enum

Returns the @var{enum} name (the string representation of the symbol)
for @var{value} (or @code{#f} if it does not exists), or the list of all
names for @var{enum}, respectively.

@var{value} can either be a @code{symbol} or an @code{id}.
@end deffn


@anchor{<gi-enum>}
@deftp Class <gi-enum>

The @code{<gi-enum>} class is a subclass of @code{<enum>}.  Its
@code{class-direct-slots} are:

@indentedblock
@table @code
@item @emph{gi-name}
#:accessor !gi-name @*
#:init-keyword #:gi-name

@item @emph{scm-name}
#:accessor !scm-name
@end table
@end indentedblock

The @code{scm-name} slot is automatically initialized.

Instances of the @code{<gi-enum>} class are immutable (to be precise,
there are not meant to be mutated, see @ref{GOOPS Notes and
Conventions}, 'Slots are not Immutable').
@end deftp


@anchor{!gi-name}
@anchor{!scm-name}
@deffn Method !gi-name gi-enum
@deffnx Method !scm-name gi-enum

Returns the content of the gi-name or scm-name slot for @var{gi-enum},
respectively.
@end deffn
