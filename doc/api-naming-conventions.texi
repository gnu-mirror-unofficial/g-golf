@c -*-texinfo-*-
@c This is part of the GNU G-Golf Reference Manual.
@c Copyright (C) 2016 - 2018 Free Software Foundation, Inc.
@c See the file g-golf.texi for copying conditions.


@node Naming Conventions
@subsection Naming Conventions


@subheading Glib and GObject functions

G-Golf low level API procedure names that bind a Glib or GObject
function always use the @samp{original} name, except that @code{_} are
replaced by @code{-}. For example:

@example
g_main_loop_new
->
@ref{g-main-loop-new}
@end example


@subheading GObject Introspection Funtions

G-Golf low level API procedure names that bind a GI function also always
use the @samp{original} name, except that @code{_} are replaced by
@code{-}. For example:

@example
g_irepository_get_loaded_namespaces
->
@ref{g-irepository-get-loaded-namespaces}
@end example


@subheading Types and Values

G-Golf low level API variables that bind Glib, GObject and GI types and
values use the exact same convention as for procedures, except that they
always start with @code{%}.  For example, from the @code{GIBaseInfo}
section:

@example
GIInfoType
->
@ref{%g-base-info-info-type}
@end example


@subheading G-Golf

G-Golf also comes with its own set of procedures, syntax and variables,
aimed at not just reading a typelib, but making its functionality
available from @uref{@value{UGUILE}, Guile}.

Here are two examples:

@enumerate a
@item
procedure names that start with @code{call-with-input-},
@code{call-with-output-} followed by a GI, Glib or GObject type, such
as:

@example
@ref{call-with-input-typelib}
@end example

@item
syntax names that start as @code{with-} followed by a GI, Glib or GObject
type, such as:

@example
with-gerror @c @ref{with-gerror}
@end example
@end enumerate

When an @samp{obvious} name can't be find @samp{on its own}, or to avoid
possible conflict outside G-Golf@footnote{As an example, it would not be
a good idea to use (the name) @code{import} for the G-Golf procedure
that reads and build the interface for a @code{GIR} library, since it is
an R6RS reserved word.}, then the name starts using the @code{g-golf-}
prefix, and equally for variables, using @code{%g-golf-}.

@subheading Gnome Libraries

Imported Gnome libraries will follow @uref{@value{UGG}, Guile-Gnome}'s
naming conventions, from which it will actually reuse the functionality
developed at the time (see @uref{@value{UGGMGOG}, 9.1.1 Mapping class
libraries to scheme} and @uref{@value{UGGMGOU}, 10.2 Usage} in @emph{the
GNU Guile-Gnome: GObject Refence Manual}). For example, the following
names would be transformed like this:

@lisp
ClutterActor -> clutter-actor
clutter_actor_new -> clutter-actor-new
clutter_actor_hide -> clutter-actor-hide
@dots{}
@end lisp

The following class names would be transformed like this:

@lisp
ClutterActor -> <clutter-actor>
GtkWindow -> <gtk-window>
@dots{}
@end lisp

Once G-Golf high level API is also implemented, Gnome libraries GObject
classes and methods will become GOOPS citizen (@pxref{GOOPS,,, guile,
The GNU Guile Reference Manual}), and in the land of generic function
multi methods polimorphic object oriented systems, users just have fun:

@lisp
,use (g-golf)
(g-golf-import "Clutter")
@print{}
$2 = #<<g-golf-clutter-typelib> 18237a0>

(make <clutter-actor>)
@print{}
$3 = #<<clutter-actor> 32124b0>
@dots{}
@end lisp
