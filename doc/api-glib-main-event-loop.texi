@c -*-texinfo-*-
@c This is part of the GNU G-Golf Reference Manual.
@c Copyright (C) 2016 - 2018 Free Software Foundation, Inc.
@c See the file g-golf.texi for copying conditions.


@c @defindex tl


@node The Main Event Loop
@subsection The Main Event Loop

G-Golf Glib Main Event Loop low level API.@*
The Main Event Loop â€” manages all available sources of events


@subheading Procedures

@indentedblock
@table @code
@item @ref{g-main-loop-new}
@item @ref{g-main-loop-run}
@item @ref{g-main-loop-ref}
@item @ref{g-main-loop-unref}
@item @ref{g-main-loop-quit}
@item @ref{g-idle-source-new}
@end table
@end indentedblock


@c @subheading Types and Values

@c @indentedblock
@c @table @code
@c @item @ref{<gi-enum>}
@c @end table
@c @end indentedblock


@c @subheading Struct Hierarchy

@c @indentedblock
@c GIBaseInfo           	       		@*
@c @ @ +--- GIRegisteredTypeInfo  		@*
@c @ @ @ @ @ @ @ @ @ @ @  +--- GIEnumInfo
@c @end indentedblock


@subheading Description

The main event loop manages all the available sources of events for GLib
and GTK+ applications. These events can come from any number of
different types of sources such as file descriptors (plain files, pipes
or sockets) and timeouts. New types of event sources can also be added
using @code{g-source-attach}.

Please read @uref{@value{UGLIB-Main-Event-Loop}, The Main Event Loop}
section from the Glib reference manual for a complete description.


@subheading Procedures

@anchor{g-main-loop-new}
@deffn Procedure g-main-loop-new [context #f] [is-running? #f]

Returns a pointer to a new @code{GMainLoop}.

Creates a new @code{GMainLoop} structure.

The @var{context} must be a pointer to a @code{GMainContext} of
@code{#f}, in which case the default context is used.  When
@var{is-running?} is @code{#t}, it indicates that the loop is
running. This is not very important since calling @code{g-main-loop-run}
will set this to @code{#t} anyway.
@end deffn


@anchor{g-main-loop-ref}
@deffn Procedure g-main-loop-ref loop

Returns loop.

Increases the @var{loop} reference count by one.
@end deffn


@anchor{g-main-loop-unref}
@deffn Procedure g-main-loop-unref loop

Returns nothing.

Decreases the @var{loop} reference count by one. If the result is zero,
free the loop and free all associated memory.
@end deffn


@anchor{g-main-loop-run}
@deffn Procedure g-main-loop-run loop

Returns nothing.

Runs a main loop until @ref{g-main-loop-quit} is called on the
@var{loop}. If this is called for the thread of the loop's
@code{GMainContext}, it will process events from the @var{loop},
otherwise it will simply wait.
@end deffn


@anchor{g-main-loop-quit}
@deffn Procedure g-main-loop-quit loop

Returns nothing.

Stops a @code{GMainLoop} from running. Any calls to
@ref{g-main-loop-run} for the @var{loop} will return.

Note that sources that have already been dispatched when
@code{g-main-loop-quit} is called will still be executed.
@end deffn


@anchor{g-idle-source-new}
@deffn Procedure g-idle-source-new

Returns a pointer to a new @code{GSource}.

Creates a new idle source.

The source will not initially be associated with any @code{GMainContext}
and must be added to one with @code{g-source-attach} before it will be
executed. Note that the default priority for idle sources is @code{200},
as compared to other sources which have a default priority of
@code{300}.
@end deffn


@c @subheading Types and Values
