@c -*-texinfo-*-

@c This is part of the GNU G-Golf Reference Manual.
@c Copyright (C) 2019 - 2020 Free Software Foundation, Inc.  See the
@c file g-golf.texi for copying conditions.


@c @defindex ei


@node Import
@subsection Import

G-Golf Import high level API.@*
The G-Golf GIR namespace (Typelib) import high level API.


@subheading Procedures

@indentedblock
@table @code
@item @ref{gi-import}
@item @ref{gi-import-by-name}
@item @ref{gi-import-info}
@item @ref{gi-import-enum}
@item @ref{gi-import-flag}
@item @ref{gi-import-struct}
@item @ref{gi-import-function}
@item @ref{gi-import-constant}
@end table
@end indentedblock


@subheading Variables

@indentedblock
@table @code
@item @ref{%gi-base-info-types}
@item @ref{%gi-imported-base-info-types}
@end table
@end indentedblock


@c @subheading Description


@subheading Procedures


@anchor{gi-import}
@deffn Procedure gi-import namespace [#:version #f]

Returns nothing.

Imports the @var{namespace} GIR Typelib and exports its interface. For
example:

@lisp
,use (g-golf
(gi-import "Clutter")
@end lisp

The @var{namespace} is a case sensitive string. It is an error to call
this procedure using an invalid @var{namespace}.

The optional @var{#:version} keyword argument may be used to require a
specific @var{namespace} version, otherwise, the latest will be used.

This procedure is certainly one of the first thing you will want to try
and use, but it has a cost: you will not @samp{feel it} if the number of
objects in @var{namespace} is relatively small, but importing the "Gtk"
namespace, on a laptop equiped with a i5-2450M CPU @ 2.50GHz Ã— 4 and 6GB
of memory takes nearly 2 seconds.

So, either early in the development cycle, or when your application is
more stable, at your best convenience, you may consider making a series
of selective import instead, see @ref{gi-import-by-name} here below.
@end deffn


@anchor{gi-import-by-name}
@deffn Procedure gi-import-by-name namespace name [#:version #f] @
       [#:with-method #t]

Returns the object or constant returned by @ref{gi-import-info} called
upon the GIBaseInfo @code{info} named @var{name} in @var{namespace}.

Obtains and imports the GIBaseInfo @code{info} named @var{name} in
@var{namespace}. The @var{namespace} and @var{name} arguments are case
sensitive. It is an error to call this procedure using an invalid
@var{namespace} or @var{name}.

The optional @var{#:version} keyword argument may be used to require a
specific @var{namespace} version, otherwise, the latest will be used.

The optional keyword @var{#:with-method} argument - which is #t by
default - is passed to the @code{gi-import-enum}, @code{gi-import-flag}
and @code{gi-import-struct}. When @var{#:with-method} is #f, then the
enum, flag or struct @code{info} will be imported without their
respective methods. This is likely to only be the case if/when you
intend to selectively import an enum, gflag or struct from GLib or
GObject, which is what G-Golf itself does, for example, in the top level
(g-golf) module:

@lisp
(gi-import-by-name "GLib" "IOChannel" #:with-method #f)
@end lisp
@end deffn


@anchor{gi-import-info}
@deffn Procedure gi-import-info info

Returns the object or constant returned by the one of the
@code{gi-import-enum}, @code{gi-import-flag}, @dots{}, called upon
@code{info}.

Obtains the GIBaseInfo type for @code{info} and uses it to dispatch a
call to @code{gi-import-enum}, @code{gi-import-enum}, @dots{}, and
returns the object or constant returned by the procedure that has been
called.

You probably will prefer to call @ref{gi-import-by-name} most of the
time, but here is a example:

@lisp
,use (g-golf)
(g-irepository-require "Clutter")
$2 = #<pointer 0x5642cb065e30>

(g-irepository-find-by-name "Clutter" "ActorFlags")
$3 = #<pointer 0x5642cb067de0>

(gi-import-info $3)
$4 = #<<gi-flag> 5642cb13c5d0>

(describe $4)
#<<gi-flag> 5642cb13c5d0> is an instance of class <gi-flag>
Slots are:
     enum-set = ((mapped . 2) (realized . 4) (reactive . 8) (visible . 16) (no-layout . 32))
     g-type = 94844874149456
     g-name = "ClutterActorFlags"
     name = clutter-actor-flags
@end lisp
@end deffn


@anchor{gi-import-enum}
@anchor{gi-import-flag}
@anchor{gi-import-struct}
@deffn Procedure gi-import-enum info [#:with-method #t]
@deffnx Procedure gi-import-flag info [#:with-method #t]
@deffnx Procedure gi-import-struct info [#:with-method #t]

Returns a @ref{<gi-enum>}, a @ref{<gi-flag>} or a @ref{<gi-struct>}
instance, respectively.

The @var{info} argument is (must be) a pointer to @code{GIEnumInfo}, a
@code{GIEnumInfo} for which @code{(@ref{g-base-info-get-type} info)}
returned @code{'flags} and a @code{GIStructInfo} respectively. It is an
error to call any of these procedures upon an invalid @var{info}
argument.

The optional keyword @var{#:with-method} argument - which is #t by
default - is passed using #f, then @var{info} will be imported without
its respective methods. A description and an example ware also given
here above, as part of the @ref{gi-import-by-name} documentation entry.

Every imported @ref{<gi-enum>}, @ref{<gi-flag>} and @ref{<gi-struct>}
instance is cached under the @code{'enum}, @code{'flag} and
@code{'boxed} main key (respectively), using the content of their
(symbol) @code{name} slot as the secondary key. For example, reusing the
"Clutter" "ActorFlags" namespace/name introduced above, you would
retreive its @ref{<gi-flag>} instance as is:

@lisp
@dots{}
(gi-cache-ref 'flag 'clutter-actor-flags)
$6 = #<<gi-flag> 5642cb13c5d0>
@end lisp
@end deffn


@anchor{gi-import-function}
@deffn Procedure gi-import-function info

Returns a @ref{<function>} instance.

Imports @var{info} - a pointer to a @code{GIFunctionInfo} (see
@ref{Function Info}), which represents a function, a method or a
constructor - in Guile and exports its interface. This procedure also
imports, recursively (and exports the interface of) its argument's
type(s) and method(s).

Every imported function, method and constructor is cached under
@code{'function} main key, and using the value of their @ref{<function>}
instance @code{name} slot as the secondary key. Here is an example:

@lisp
,use (g-golf)
(g-irepository-require "Clutter")
$2 = #<pointer 0x55c191f3fe30>

(g-irepository-find-by-name "Clutter" "init")
$3 = #<pointer 0x55c191f41de0>

(gi-import-function $3)
$4 = #<<function> 55c191e81510>

(describe $4)
#<<function> 55c191e81510> is an instance of class <function>
Slots are:
     info = #<pointer 0x55c191f41de0>
     name = clutter-init
     flags = ()
     n-arg = 2
     caller-owns = nothing
     return-type = interface
@dots{}

(gi-cache-ref 'function 'clutter-init)
$5 = #<<function> 55c191e81510>
@end lisp

@emph{Returned value(s):}

In most situations, but when the @code{return-type} is @code{'void} (in
which case nothing is returned), the function or method returned value
comes first, then in order, if any, the @code{'inout} and/or
@code{'out} argument(s).

However, some function and method, that have at least one @code{'inout}
or @code{'out} argument(s), do return a @code{'boolean}, but solely to
indicate that the function or method call was successful or not. It is
only if the call is successful that the @code{'inout} and/or @code{'out}
argument(s) have been @samp{correctly} set and may be safely used.

In scheme, when binding such a function or method, we would rather (a)
when the call is successful, elude the boolean and return, in order,
the @code{'inout} and/or @code{'out} argument(s) value(s); and (b), when
the call is unsuccessful, raise an exception.

Since it is not possible to automatically @samp{detect} these functions
and methods, G-Golf defines a @ref{%gi-strip-boolean-result} variable,
initially empty, that users may fill appropriately, using the function
or method (symbol) name, as described in its documentation: make sure to
carefully read and understand it.
@end deffn


@anchor{gi-import-constant}
@deffn Procedure gi-import-constant info

Returns two values, the constant value and its name.

Obtains and returns the @var{info} constant value and its name. For
example:

@lisp
,use (g-golf)
(g-irepository-require "GLib")
#<pointer 0x55ad58e6ae00>

(g-irepository-find-by-name "GLib" "PRIORITY_DEFAULT_IDLE")
$3 = #<pointer 0x55ad58e6cde0>

(gi-import-constant $3)
$4 = 200
$5 = "PRIORITY_DEFAULT_IDLE"
@end lisp

Constants are curently not being automatically imported, though this
will probably change in the near future, stay tuned.
@end deffn


@subheading Variables


@anchor{%gi-base-info-types}
@anchor{%gi-imported-base-info-types}
@defvar %gi-base-info-types
@defvarx %gi-imported-base-info-types

A (cumulative) list of the distinct (top level) base info types
contained in the imported namespace(s).

These two variables have no other purpose then offering a feedback
about: (a) the (top level) base info types contained in the namespace(s)
passed to @ref{gi-import}; (b) the (top level) base info types that have
effectively been imported - when @code{G-Golf} is complete, both lists
should be identical.

Initially, these variables are empty. As @ref{gi-import},
@ref{gi-import-info} and/or @ref{gi-import-by-name} are being called,
they are filled with new types, which are added to both lists.

Note that theorder in which base info types appear in these two lists is
rrelevant, and may slightly vary, depending on the order of the
namespace used for the successive @ref{gi-import} calls and how complete
is @code{G-Golf}.
@end defvar
